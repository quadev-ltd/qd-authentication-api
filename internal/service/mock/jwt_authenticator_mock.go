// Code generated by MockGen. DO NOT EDIT.
// Source: ./jwt_authenticator.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	jwt "github.com/golang-jwt/jwt"
	gomock "github.com/golang/mock/gomock"
)

// MockJWTAthenticatorer is a mock of JWTAthenticatorer interface.
type MockJWTAthenticatorer struct {
	ctrl     *gomock.Controller
	recorder *MockJWTAthenticatorerMockRecorder
}

// MockJWTAthenticatorerMockRecorder is the mock recorder for MockJWTAthenticatorer.
type MockJWTAthenticatorerMockRecorder struct {
	mock *MockJWTAthenticatorer
}

// NewMockJWTAthenticatorer creates a new mock instance.
func NewMockJWTAthenticatorer(ctrl *gomock.Controller) *MockJWTAthenticatorer {
	mock := &MockJWTAthenticatorer{ctrl: ctrl}
	mock.recorder = &MockJWTAthenticatorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTAthenticatorer) EXPECT() *MockJWTAthenticatorerMockRecorder {
	return m.recorder
}

// GenerateNewKeyPair mocks base method.
func (m *MockJWTAthenticatorer) GenerateNewKeyPair() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateNewKeyPair")
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateNewKeyPair indicates an expected call of GenerateNewKeyPair.
func (mr *MockJWTAthenticatorerMockRecorder) GenerateNewKeyPair() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateNewKeyPair", reflect.TypeOf((*MockJWTAthenticatorer)(nil).GenerateNewKeyPair))
}

// GetEmailFromToken mocks base method.
func (m *MockJWTAthenticatorer) GetEmailFromToken(token *jwt.Token) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailFromToken", token)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailFromToken indicates an expected call of GetEmailFromToken.
func (mr *MockJWTAthenticatorerMockRecorder) GetEmailFromToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailFromToken", reflect.TypeOf((*MockJWTAthenticatorer)(nil).GetEmailFromToken), token)
}

// GetPublicKey mocks base method.
func (m *MockJWTAthenticatorer) GetPublicKey(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey.
func (mr *MockJWTAthenticatorerMockRecorder) GetPublicKey(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockJWTAthenticatorer)(nil).GetPublicKey), ctx)
}

// SignToken mocks base method.
func (m *MockJWTAthenticatorer) SignToken(email string, expiry time.Time) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignToken", email, expiry)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignToken indicates an expected call of SignToken.
func (mr *MockJWTAthenticatorerMockRecorder) SignToken(email, expiry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignToken", reflect.TypeOf((*MockJWTAthenticatorer)(nil).SignToken), email, expiry)
}

// VerifyToken mocks base method.
func (m *MockJWTAthenticatorer) VerifyToken(token string) (*jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", token)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockJWTAthenticatorerMockRecorder) VerifyToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockJWTAthenticatorer)(nil).VerifyToken), token)
}

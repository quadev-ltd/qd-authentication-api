// Code generated by MockGen. DO NOT EDIT.
// Source: token_service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "qd-authentication-api/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	jwt "github.com/quadev-ltd/qd-common/pkg/jwt"
	token "github.com/quadev-ltd/qd-common/pkg/token"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockTokenServicer is a mock of TokenServicer interface.
type MockTokenServicer struct {
	ctrl     *gomock.Controller
	recorder *MockTokenServicerMockRecorder
}

// MockTokenServicerMockRecorder is the mock recorder for MockTokenServicer.
type MockTokenServicerMockRecorder struct {
	mock *MockTokenServicer
}

// NewMockTokenServicer creates a new mock instance.
func NewMockTokenServicer(ctrl *gomock.Controller) *MockTokenServicer {
	mock := &MockTokenServicer{ctrl: ctrl}
	mock.recorder = &MockTokenServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenServicer) EXPECT() *MockTokenServicerMockRecorder {
	return m.recorder
}

// GenerateEmailVerificationToken mocks base method.
func (m *MockTokenServicer) GenerateEmailVerificationToken(ctx context.Context, userID primitive.ObjectID) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateEmailVerificationToken", ctx, userID)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateEmailVerificationToken indicates an expected call of GenerateEmailVerificationToken.
func (mr *MockTokenServicerMockRecorder) GenerateEmailVerificationToken(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateEmailVerificationToken", reflect.TypeOf((*MockTokenServicer)(nil).GenerateEmailVerificationToken), ctx, userID)
}

// GenerateJWTToken mocks base method.
func (m *MockTokenServicer) GenerateJWTToken(ctx context.Context, claims *jwt.TokenClaims) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWTToken", ctx, claims)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateJWTToken indicates an expected call of GenerateJWTToken.
func (mr *MockTokenServicerMockRecorder) GenerateJWTToken(ctx, claims interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWTToken", reflect.TypeOf((*MockTokenServicer)(nil).GenerateJWTToken), ctx, claims)
}

// GenerateJWTTokens mocks base method.
func (m *MockTokenServicer) GenerateJWTTokens(ctx context.Context, userEmail, userID string) (*model.AuthTokensResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWTTokens", ctx, userEmail, userID)
	ret0, _ := ret[0].(*model.AuthTokensResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateJWTTokens indicates an expected call of GenerateJWTTokens.
func (mr *MockTokenServicerMockRecorder) GenerateJWTTokens(ctx, userEmail, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWTTokens", reflect.TypeOf((*MockTokenServicer)(nil).GenerateJWTTokens), ctx, userEmail, userID)
}

// GeneratePasswordResetToken mocks base method.
func (m *MockTokenServicer) GeneratePasswordResetToken(ctx context.Context, userID primitive.ObjectID) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePasswordResetToken", ctx, userID)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePasswordResetToken indicates an expected call of GeneratePasswordResetToken.
func (mr *MockTokenServicerMockRecorder) GeneratePasswordResetToken(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePasswordResetToken", reflect.TypeOf((*MockTokenServicer)(nil).GeneratePasswordResetToken), ctx, userID)
}

// GetPublicKey mocks base method.
func (m *MockTokenServicer) GetPublicKey(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey.
func (mr *MockTokenServicerMockRecorder) GetPublicKey(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockTokenServicer)(nil).GetPublicKey), ctx)
}

// RemoveUnusedTokens mocks base method.
func (m *MockTokenServicer) RemoveUnusedTokens(ctx context.Context, userID string, tokenType token.Type) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUnusedTokens", ctx, userID, tokenType)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUnusedTokens indicates an expected call of RemoveUnusedTokens.
func (mr *MockTokenServicerMockRecorder) RemoveUnusedTokens(ctx, userID, tokenType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUnusedTokens", reflect.TypeOf((*MockTokenServicer)(nil).RemoveUnusedTokens), ctx, userID, tokenType)
}

// RemoveUsedToken mocks base method.
func (m *MockTokenServicer) RemoveUsedToken(ctx context.Context, token *model.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUsedToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUsedToken indicates an expected call of RemoveUsedToken.
func (mr *MockTokenServicerMockRecorder) RemoveUsedToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUsedToken", reflect.TypeOf((*MockTokenServicer)(nil).RemoveUsedToken), ctx, token)
}

// VerifyEmailVerificationToken mocks base method.
func (m *MockTokenServicer) VerifyEmailVerificationToken(ctx context.Context, userID, token string) (*model.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmailVerificationToken", ctx, userID, token)
	ret0, _ := ret[0].(*model.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmailVerificationToken indicates an expected call of VerifyEmailVerificationToken.
func (mr *MockTokenServicerMockRecorder) VerifyEmailVerificationToken(ctx, userID, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmailVerificationToken", reflect.TypeOf((*MockTokenServicer)(nil).VerifyEmailVerificationToken), ctx, userID, token)
}

// VerifyJWTToken mocks base method.
func (m *MockTokenServicer) VerifyJWTToken(ctx context.Context, refreshTokenString string) (*jwt.TokenClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyJWTToken", ctx, refreshTokenString)
	ret0, _ := ret[0].(*jwt.TokenClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyJWTToken indicates an expected call of VerifyJWTToken.
func (mr *MockTokenServicerMockRecorder) VerifyJWTToken(ctx, refreshTokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyJWTToken", reflect.TypeOf((*MockTokenServicer)(nil).VerifyJWTToken), ctx, refreshTokenString)
}

// VerifyResetPasswordToken mocks base method.
func (m *MockTokenServicer) VerifyResetPasswordToken(ctx context.Context, userID, token string) (*model.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyResetPasswordToken", ctx, userID, token)
	ret0, _ := ret[0].(*model.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyResetPasswordToken indicates an expected call of VerifyResetPasswordToken.
func (mr *MockTokenServicerMockRecorder) VerifyResetPasswordToken(ctx, userID, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyResetPasswordToken", reflect.TypeOf((*MockTokenServicer)(nil).VerifyResetPasswordToken), ctx, userID, token)
}

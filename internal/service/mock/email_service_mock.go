// Code generated by MockGen. DO NOT EDIT.
// Source: email_service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEmailServicer is a mock of EmailServicer interface.
type MockEmailServicer struct {
	ctrl     *gomock.Controller
	recorder *MockEmailServicerMockRecorder
}

// MockEmailServicerMockRecorder is the mock recorder for MockEmailServicer.
type MockEmailServicerMockRecorder struct {
	mock *MockEmailServicer
}

// NewMockEmailServicer creates a new mock instance.
func NewMockEmailServicer(ctrl *gomock.Controller) *MockEmailServicer {
	mock := &MockEmailServicer{ctrl: ctrl}
	mock.recorder = &MockEmailServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailServicer) EXPECT() *MockEmailServicerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockEmailServicer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockEmailServicerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEmailServicer)(nil).Close))
}

// SendAuthenticationSuccessEmail mocks base method.
func (m *MockEmailServicer) SendAuthenticationSuccessEmail(ctx context.Context, dest, userName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAuthenticationSuccessEmail", ctx, dest, userName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAuthenticationSuccessEmail indicates an expected call of SendAuthenticationSuccessEmail.
func (mr *MockEmailServicerMockRecorder) SendAuthenticationSuccessEmail(ctx, dest, userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAuthenticationSuccessEmail", reflect.TypeOf((*MockEmailServicer)(nil).SendAuthenticationSuccessEmail), ctx, dest, userName)
}

// SendDeletedUserEmail mocks base method.
func (m *MockEmailServicer) SendDeletedUserEmail(ctx context.Context, dest, userName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDeletedUserEmail", ctx, dest, userName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDeletedUserEmail indicates an expected call of SendDeletedUserEmail.
func (mr *MockEmailServicerMockRecorder) SendDeletedUserEmail(ctx, dest, userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDeletedUserEmail", reflect.TypeOf((*MockEmailServicer)(nil).SendDeletedUserEmail), ctx, dest, userName)
}

// SendPasswordResetEmail mocks base method.
func (m *MockEmailServicer) SendPasswordResetEmail(ctx context.Context, dest, userName, userID, resetToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPasswordResetEmail", ctx, dest, userName, userID, resetToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPasswordResetEmail indicates an expected call of SendPasswordResetEmail.
func (mr *MockEmailServicerMockRecorder) SendPasswordResetEmail(ctx, dest, userName, userID, resetToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPasswordResetEmail", reflect.TypeOf((*MockEmailServicer)(nil).SendPasswordResetEmail), ctx, dest, userName, userID, resetToken)
}

// SendPasswordResetSuccessEmail mocks base method.
func (m *MockEmailServicer) SendPasswordResetSuccessEmail(ctx context.Context, dest, userName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPasswordResetSuccessEmail", ctx, dest, userName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPasswordResetSuccessEmail indicates an expected call of SendPasswordResetSuccessEmail.
func (mr *MockEmailServicerMockRecorder) SendPasswordResetSuccessEmail(ctx, dest, userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPasswordResetSuccessEmail", reflect.TypeOf((*MockEmailServicer)(nil).SendPasswordResetSuccessEmail), ctx, dest, userName)
}

// SendVerificationEmail mocks base method.
func (m *MockEmailServicer) SendVerificationEmail(ctx context.Context, dest, userName, userID, verificationToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendVerificationEmail", ctx, dest, userName, userID, verificationToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendVerificationEmail indicates an expected call of SendVerificationEmail.
func (mr *MockEmailServicerMockRecorder) SendVerificationEmail(ctx, dest, userName, userID, verificationToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVerificationEmail", reflect.TypeOf((*MockEmailServicer)(nil).SendVerificationEmail), ctx, dest, userName, userID, verificationToken)
}

// SendVerificationSuccessEmail mocks base method.
func (m *MockEmailServicer) SendVerificationSuccessEmail(ctx context.Context, dest, userName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendVerificationSuccessEmail", ctx, dest, userName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendVerificationSuccessEmail indicates an expected call of SendVerificationSuccessEmail.
func (mr *MockEmailServicerMockRecorder) SendVerificationSuccessEmail(ctx, dest, userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVerificationSuccessEmail", reflect.TypeOf((*MockEmailServicer)(nil).SendVerificationSuccessEmail), ctx, dest, userName)
}

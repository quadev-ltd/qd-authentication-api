// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	repository "qd-authentication-api/internal/repository"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryer is a mock of Repositoryer interface.
type MockRepositoryer struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryerMockRecorder
}

// MockRepositoryerMockRecorder is the mock recorder for MockRepositoryer.
type MockRepositoryerMockRecorder struct {
	mock *MockRepositoryer
}

// NewMockRepositoryer creates a new mock instance.
func NewMockRepositoryer(ctrl *gomock.Controller) *MockRepositoryer {
	mock := &MockRepositoryer{ctrl: ctrl}
	mock.recorder = &MockRepositoryerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryer) EXPECT() *MockRepositoryerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRepositoryer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRepositoryerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepositoryer)(nil).Close))
}

// GetTokenRepository mocks base method.
func (m *MockRepositoryer) GetTokenRepository() repository.TokenRepositoryer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenRepository")
	ret0, _ := ret[0].(repository.TokenRepositoryer)
	return ret0
}

// GetTokenRepository indicates an expected call of GetTokenRepository.
func (mr *MockRepositoryerMockRecorder) GetTokenRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenRepository", reflect.TypeOf((*MockRepositoryer)(nil).GetTokenRepository))
}

// GetUserRepository mocks base method.
func (m *MockRepositoryer) GetUserRepository() repository.UserRepositoryer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRepository")
	ret0, _ := ret[0].(repository.UserRepositoryer)
	return ret0
}

// GetUserRepository indicates an expected call of GetUserRepository.
func (mr *MockRepositoryerMockRecorder) GetUserRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRepository", reflect.TypeOf((*MockRepositoryer)(nil).GetUserRepository))
}
